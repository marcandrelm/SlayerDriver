/*-----------------------------------------------------------------------------
  _   _ ____  ____    ____       _                
 | | | / ___|| __ )  |  _ \ _ __(_)_   _____ _ __ 
 | | | \___ \|  _ \  | | | | '__| \ \ / / _ \ '__|
 | |_| |___) | |_) | | |_| | |  | |\ V /  __/ |   
  \___/|____/|____/ _|____/|_| _|_| \_/ \___|_|   
 | ____| |   | ____|___  ( _ )| || |              
 |  _| | |   |  _|    / // _ \| || |_             
 | |___| |___| |___  / /| (_) |__   _|            
 |_____|_____|_____|/_/  \___/   |_|              
                                        

 Engineer      : Marc-Andre Lafaille Magnan

 Create Date   : 11:45:00 10/11/2014
 Project Name  : CamDriver
 Target Devices: Orbitaf AF
 Tool versions : kernel 3.2.34etsele
 Description   : camera usb driver
 
 Revision:
 Revision 0.01 - Constructing
 Additional Comments:

-----------------------------------------------------------------------------*/

/*--- Table of content --------------------------------------------------------
    Inclusion           [Incl]
    Define              [Def]
    Licence             [Lic]
    Struct              [Strc]
    Enumeration         [Enum]
    Function            [Func]
    Global Variable     [GVar]
    Function definition [Fdef]
*/

// Inclusion [Incl] -----------------------------------------------------------
#include <linux/kernel.h>
#include <linux/errno.h>
#include <linux/init.h>
#include <linux/slab.h>
#include <linux/module.h>
#include <linux/kref.h>
#include <linux/spinlock.h>
#include <linux/semaphore.h>
#include <linux/mutex.h>
#include <linux/usb.h>
#include <linux/uaccess.h>

#include "usbvideo.h"

// Licence [Lic] --------------------------------------------------------------
MODULE_AUTHOR  ("M-A. Lf. M., C.-A. G.");
MODULE_LICENSE ("Dual BSD/GPL");
MODULE_VERSION ("0.5");
MODULE_DESCRIPTION("Home made Logitec camera \"QuickCamÂ® Orbit AF\" driver ");

// Define [Def] ---------------------------------------------------------------

#define DEBUG               (1)
#define SUCCESS             (0)
#define DRIVER_TAG          "Slayer: "//"eleCam:"
#define DRIVER_NAME         "Slayer"  //"eleCam"

#define TARGET_INTERFACE    (1)  // Specified by lab document
#define TARGET_CONFIG 		(4)  // Specified by lab document

// Vendor ID
#define USB_CAM_VENDOR_ID0  (0x046D)
#define USB_CAM_PRODUCT_ID0	(0x08CC)
#define USB_CAM_VENDOR_ID1  (0x046D)
#define USB_CAM_PRODUCT_ID1	(0x0994)

#define USB_CAM_MINOR_BASE  (192)

//IOCTL
#define BUFF_IOC_MAGIC   	(45)
#define BUFF_IOC_MAX     	(0x6F)

#define IOCTL_GET            _IOR (BUFF_IOC_MAGIC, 0x10, int)
#define IOCTL_SET            _IOW (BUFF_IOC_MAGIC, 0x20, int)
#define IOCTL_STREAMON       _IOW (BUFF_IOC_MAGIC, 0x30, int)
#define IOCTL_STREAMOFF      _IOW (BUFF_IOC_MAGIC, 0x40, int)
#define IOCTL_GRAB           _IOR (BUFF_IOC_MAGIC, 0x50, int)
#define IOCTL_PANTILT        _IOW (BUFF_IOC_MAGIC, 0x60, int)
#define IOCTL_PANTILT_RESET  _IO  (BUFF_IOC_MAGIC, 0x61)

#define to_cam_dev(d) container_of(d, struct usb_cam, kref)

/* Debug options ------------
 * print_alert() : Critical print ( no sleep)
 * print_warn()  : Warning  print (may sleep)
 * print_debug() : Debug    print (may sleep), are removed on Release
 * IS_CAPABLE()  : Verify if system Admin
*/
#define print_alert(...)  printk(KERN_ALERT   DRIVER_TAG __VA_ARGS__);
#define print_warn(...)   printk(KERN_WARNING DRIVER_TAG __VA_ARGS__);

#if (DEBUG > 0)
    #define print_debug(...)  printk(KERN_DEBUG DRIVER_TAG __VA_ARGS__);
    #define IS_CAPABLE  
#else
    #define print_debug(...)
    #define IS_CAPABLE  if(!capable (CAP_SYS_ADMIN)) { \
                            print_alert("Not Admin") \
                            return -EPERM; } 
 #endif
                           
// Struct [Strc] --------------------------------------------------------------
static struct usb_device_id Cam_ID_Table [] = {
	{ USB_DEVICE(USB_CAM_VENDOR_ID0, USB_CAM_PRODUCT_ID0) },
	{ USB_DEVICE(USB_CAM_VENDOR_ID1, USB_CAM_PRODUCT_ID1) },
	{ } // Terminating entry
};

struct usb_cam {
	struct usb_device 		*udev;	  	// the usb device for this device
	struct usb_interface	*interface;	// the interface for this device

    struct urb    	*bulk_in_urb;		// the urb to read data with
	unsigned char 	*bulk_in_buffer;	// the buffer to receive data
	size_t		 	bulk_in_size;		// the size of the receive buffer
	size_t      	bulk_in_filled; 	// number of bytes in the buffer
	size_t     		bulk_in_copied;   	// already copied to user space
	uint8_t		 	bulk_in_endpointAddr;
	uint8_t		 	bulk_out_endpointAddr;

	struct kref  	kref; 			// Shared structure reference counter
	int         	errors;      	// the last request tanked
	int             open_count;  	// count the number of openers
	bool            ongoing_read;	// a read is going on
	bool            processed_urb; 	// indicates we haven't processed the urb
	spinlock_t      err_lock;     	// lock for errors

	struct mutex     	io_mutex;         	// synchronize I/O with disconnect
	struct completion	bulk_in_completion;	// to wait for an ongoing read

};
// Enumeration [Enum] ---------------------------------------------------------

// Function [Func] ------------------------------------------------------------
int  CAM_Init    (void);
void CAM_CleanUp (void);

int  Cam_Open    (struct inode *inode, struct file *file);
int  Cam_Release (struct inode *inode, struct file *file);
void Cam_Delete  (struct kref *kref);

int  Cam_Probe     (struct usb_interface *interface,
			  const struct usb_device_id *id);
void Cam_Disconnect(struct usb_interface *interface);

long Cam_Ioctl(struct file *file, unsigned int cmd, unsigned long arg);
int  Cam_Grab (struct usb_interface *interface);

    ssize_t Cam_Read (struct file *file, char __user *buffer,
						   size_t count, loff_t *ppos);

void Cam_Read_Callback (struct urb *urb);

int  Cam_Read_io(struct usb_cam *dev, size_t count);

void Print_setting_desc(struct usb_interface *interface);

// Global Variable [GVar] -----------------------------------------------------
struct file_operations Cam_fops = {
	.owner   = THIS_MODULE,
	.read    = Cam_Read,
	.open    = Cam_Open,
	.release = Cam_Release,
	.unlocked_ioctl = Cam_Ioctl,
};

struct usb_driver Cam_Driver = {
	.name     	= DRIVER_NAME,
	.probe    	= Cam_Probe,
	.disconnect	= Cam_Disconnect,
	.id_table  	= Cam_ID_Table,
	// (optional) add resume/suspend
};

struct usb_class_driver Cam_Class = {
	.name 		= (DRIVER_NAME "%d"),
	.fops 		= &Cam_fops,
	.minor_base = USB_CAM_MINOR_BASE,
};

// Function definition [Fdef] -------------------------------------------------

module_init (CAM_Init);
module_exit (CAM_CleanUp);
MODULE_DEVICE_TABLE (usb, Cam_ID_Table); // Hotplug detect

/*-----------------------------------------------------------------------------
   func descp..




   note: usb_register is not used as KBUILD_MODNAME
   		 is not handled properly with Eclipse
*/
int __init CAM_Init(void) {
	int retval;
	print_debug("%s\n\r",__FUNCTION__);

	// register this driver with the USB subsystem
	retval = usb_register_driver(&Cam_Driver, THIS_MODULE, DRIVER_NAME);
	if (retval) {
		print_alert("%s : failed with error %d\n\r", __FUNCTION__,retval);
		return retval;
	}
	print_debug("%s : Done\n", __FUNCTION__);

	return retval;
}

/*-----------------------------------------------------------------------------
  func descp..

*/
void __exit CAM_CleanUp(void) {
	print_debug("%s->Start\n",__FUNCTION__);
	usb_deregister(&Cam_Driver);
	print_debug("%s->Done\n",__FUNCTION__);
}

/*-----------------------------------------------------------------------------
  func descp..

*/
int Cam_Open(struct inode *inode, struct file *file) {
	struct usb_cam 	 	 *dev;
    struct usb_interface *interface;
    int minor;

    print_debug("%s->Start\n",__FUNCTION__);

    minor = iminor(inode);

    interface = usb_find_interface(&Cam_Driver, minor);
    if (!interface) {
    	print_alert("Unable to open device");
        return -ENODEV;
    }

    dev = usb_get_intfdata(interface);
    if (!dev) { return -ENODEV; }

    // ...
    mutex_lock(&dev->io_mutex);
    dev->open_count++;
    kref_get(&dev->kref);
    file->private_data = interface;
    mutex_unlock(&dev->io_mutex);

    print_debug("%s->Done\n",__FUNCTION__);

    return SUCCESS;
}

/*-----------------------------------------------------------------------------
  func descp..

*/
int Cam_Release(struct inode *inode, struct file *file) {
	struct usb_cam *dev;

	print_debug("%s->Start\n",__FUNCTION__);

	dev = (struct usb_cam *) file->private_data;
	if (dev == NULL) { return -ENODEV; }

    mutex_lock(&dev->io_mutex);
    --dev->open_count;
    mutex_unlock(&dev->io_mutex);

	// decrement the count on our device
	kref_put(&dev->kref, Cam_Delete);

	print_debug("%s->Done\n",__FUNCTION__);

	return SUCCESS;
}
/*-----------------------------------------------------------------------------
  func descp..

*/
void Cam_Delete(struct kref *kref) {
	struct usb_cam *dev = to_cam_dev(kref);

	print_debug("%s->Start\n",__FUNCTION__);

	usb_free_urb(dev->bulk_in_urb);
	usb_put_dev(dev->udev);
	kfree (dev->bulk_in_buffer);
	kfree (dev);

	print_debug("%s->Done\n",__FUNCTION__);
}
/*-----------------------------------------------------------------------------
  func descp..

*/
int Cam_Probe(struct usb_interface *interface,
	    const struct usb_device_id *id) {

	struct usb_cam            *dev;
	struct usb_host_interface *setting;
	int retval;

	print_debug("%s->Start\n",__FUNCTION__);

	setting = interface->cur_altsetting;
	if(	setting->desc.bInterfaceClass    == USB_CLASS_VIDEO &&
		setting->desc.bInterfaceSubClass == SC_VIDEOSTREAMING) {

		dev = kmalloc(sizeof(struct usb_cam), GFP_KERNEL);
		if (dev == NULL) {
			print_alert("Out of memory");
			return -ENOMEM;
		}

		dev->udev = usb_get_dev(interface_to_usbdev(interface));
		kref_init		(&dev->kref);
		mutex_init		(&dev->io_mutex);
		spin_lock_init	(&dev->err_lock);
		init_completion	(&dev->bulk_in_completion);

		usb_set_intfdata(interface, dev);
		retval = usb_register_dev(interface, &Cam_Class);
		if (retval < 0) {
			print_alert("Not able to get a minor number for this device");
			usb_set_intfdata(interface, NULL);
			goto ERROR;
		}

		if (usb_set_interface(dev->udev, TARGET_INTERFACE, TARGET_CONFIG)) {
			print_alert("usb_set_interface failed");
			retval = -EPERM;
			goto ERROR;
		}

		// get info from (1,4) endpoints
/*
		// turn off automatic STREAMON
		usb_control_msg(dev->udev, usb_sndctrlpipe(dev->udev, 0), 0x0B,
				USB_DIR_OUT | USB_TYPE_STANDARD | USB_RECIP_INTERFACE,
				0x0000, 0x0001, NULL, 0, 0);
*/
		print_debug("%s->Done\n",__FUNCTION__);
		return SUCCESS;

	} else {
		print_debug("Unused interface");
		return -ENODEV;
	}

	ERROR:
	kref_put(&dev->kref, Cam_Delete);
	kfree(dev);
	print_debug("%s->Error\n",__FUNCTION__);
	return retval;
}
/*-----------------------------------------------------------------------------
  func descp..

*/
void Cam_Disconnect(struct usb_interface *interface) {
	struct usb_cam *dev;
	int minor = interface->minor;

    print_debug("%s \n\r",__FUNCTION__);

	dev = usb_get_intfdata(interface);
	usb_set_intfdata(interface, NULL);

	usb_deregister_dev(interface, &Cam_Class);
 
    // prevent more I/O from starting
    mutex_lock(&dev->io_mutex);
    dev->interface = NULL;
    mutex_unlock(&dev->io_mutex);

	// decrement our usage count   
	kref_put(&dev->kref, Cam_Delete);

	print_warn("Cam #%d disconnected", minor);
}
/*-----------------------------------------------------------------------------
  func descp..

*/
long  Cam_Ioctl  (struct file *file, unsigned int cmd, unsigned long arg) {
    
    struct usb_interface *interface = file->private_data;
    struct usb_device *dev = usb_get_dev(interface_to_usbdev(interface));
    //struct usb_host_interface   *iface_desc = interface->cur_altsetting;
    //unsigned char buff[] = {0x00, 0x00, 0x80, 0xFF};
    const unsigned char up[4]    = { 0x00, 0x00, 0x80, 0xFF };
    //const unsigned char down[4]  = { 0x00, 0x00, 0x80, 0x00 };
    //const unsigned char Left[4]  = { 0x80, 0x00, 0x00, 0x00 };
    //const unsigned char Right[4] = { 0x80, 0xFF, 0x00, 0x00 };
    const unsigned char Reset[1] = { 0x03 };
    
    int retval = 0;
   
    
    //IOC verification (MAGIC_nb/Valid_cmd/UserPtr)
    if (_IOC_TYPE(cmd)!= BUFF_IOC_MAGIC) { return -ENOTTY; }
    if (_IOC_NR  (cmd) > BUFF_IOC_MAX)   { return -ENOTTY; }
    if (_IOC_DIR (cmd) & _IOC_READ) {
        retval = !access_ok(VERIFY_WRITE, (void __user *)arg, _IOC_SIZE(cmd));
    }
    else if (_IOC_DIR(cmd) & _IOC_WRITE) {
        retval = !access_ok(VERIFY_READ,  (void __user *)arg, _IOC_SIZE(cmd)); 
    }
    if (retval < 0) { return -EFAULT; }

    //IOC commands
    switch (cmd) {
        case IOCTL_GET:
            print_debug("GET");
            /*
            usb_device          Votre device USB
            pipe                Endpoint #0 de type rcv
            request             SET_CUR(0x81)/SET_MIN(0x82)/SET_MAX(0x83)/
                                SET_RES(0x84)
            requestType         USB_DIR_OUT | USB_TYPE_CLASS |
                                USB_RECIP_INTERFACE
            value               Processing Unit Control Selectors << 8
            index               0x0200 
            data                2 bytes
            size                2 
            timeout             0  
            */
            
            /*
            down(&BDev.SemBuf);
            retval = buf_data(&Buffer);
            retval = put_user(retval,(int __user*) arg);
            */
            return retval;

        case IOCTL_SET:
            print_debug("SET");
            /*
            usb_device          Votre device USB
            pipe                Endpoint #0 de type SND
            request             GET_CUR(0x81)/GET_MIN(0x82)/GET_MAX(0x83)/
                                GET_RES(0x84)
            requestType         USB_DIR_IN | USB_TYPE_CLASS |
                                USB_RECIP_INTERFACE
            value               Processing Unit Control Selectors << 8
            index               0x0200 
            data                NULL
            size                2 (receive)
            timeout             0  
            */
            
            return SUCCESS;
            
        case IOCTL_STREAMON:
            print_debug("STREAMON");
            /*
            usb_device          Votre device USB
            pipe                Endpoint #0 de type SND
            request             0x0B
            requestType         USB_DIR_OUT | USB_TYPE_STANDARD |
                                USB_RECIP_INTERFACE
            value               0x0004
            index               0x0001
            data                Null
            size                0
            timeout             0 
            */            
            return SUCCESS;  
            
        case IOCTL_STREAMOFF:
            print_debug("STREAMOFF");
            /*
            usb_device          Votre device USB
            pipe                Endpoint #0 de type SND
            request             0x0B
            requestType         USB_DIR_OUT | USB_TYPE_STANDARD |
                                USB_RECIP_INTERFACE
            value               0x0000
            index               0x0001
            data                Null
            size                0
            timeout             0 
            */
            return SUCCESS;  
            
        case IOCTL_GRAB:
            print_debug("GRAB");
            return SUCCESS;
            
        case IOCTL_PANTILT:
            print_debug("PANTILT");
            //TODO get arg from user ------------------------------------------
            //TODO get endpoint address----------------------------------------

            retval = usb_control_msg(dev, usb_sndctrlpipe(dev,0), 0x01, 
                            USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE,
                            0x0100, 0x0900,(void*) up, 4*sizeof(char), 0);
            if(retval != 4){
                if(retval >= 0){
                    print_alert("not all bytes transfered");
                    return -EIO;
                }
                print_alert("usb_control_msg error");
                return retval;
            }
            return SUCCESS;
            
		case  IOCTL_PANTILT_RESET:

			retval = usb_control_msg(dev, usb_sndctrlpipe(dev,0), 0x01,
						USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE,
						0x0100, 0x0900,(void*)Reset, sizeof(char), 0);
			if(retval != 1){
			   if(retval >= 0){
				   print_alert("not all bytes transfered");
				   return -EIO;
			   }
			   print_alert("usb_control_msg error");
			   return retval;
			}
            return SUCCESS;
            
        default : return -ENOTTY;  
    }
    return -ENOTTY;
}
/*-----------------------------------------------------------------------------
  func descp..

*/
ssize_t Cam_Read(struct file *file, char __user *buffer, size_t count,
                        loff_t *ppos) {
	struct usb_cam *dev;
	unsigned long flag;
	int retval;
    bool ongoing_io;


	print_debug("%s\n\r",__FUNCTION__);

	dev = file->private_data;
	
    // if we cannot read at all, return EOF
    if (!dev->bulk_in_urb || !count) { return 0; }

    // no concurrent readers
    retval = mutex_lock_interruptible(&dev->io_mutex);
    if (retval < 0) { return retval; }

    // disconnect() was called
    if (!dev->interface) {
    	retval = -ENODEV;
    	goto exit;
    }

retry :
    spin_lock_irqsave(&dev->err_lock, flag);
    ongoing_io = dev->ongoing_read;
    spin_unlock_irqrestore(&dev->err_lock, flag);

    if (ongoing_io) {
            // nonblocking IO shall not wait
            if (file->f_flags & O_NONBLOCK) {
            	retval = -EAGAIN;
            	goto exit;
            }

            // IO may take forever hence wait in an interruptible state
            retval = wait_for_completion_interruptible(&dev->bulk_in_completion);
            if (retval < 0) { goto exit; }

            // by waiting we also semiprocessed the urb we must finish now
            dev->bulk_in_copied = 0;
            dev->processed_urb  = 1;
    }

    if (!dev->processed_urb) {
            // the URB hasn't been processed yet
            wait_for_completion(&dev->bulk_in_completion);
            dev->bulk_in_copied = 0;
            dev->processed_urb = 1;
    }

    // errors must be reported
    retval = dev->errors;
    if (retval < 0) {
            dev->errors = 0;
            retval = (retval == -EPIPE) ? retval : -EIO;
            dev->bulk_in_filled = 0;

            return retval;
    }

    /*
     * if the buffer is filled we may satisfy the read
     * else we need to start IO
     */

    if (dev->bulk_in_filled) {
    	/* we had read data */
		size_t available = dev->bulk_in_filled - dev->bulk_in_copied;
		size_t chunk = min(available, count);

		if (!available) {
			/*
			 * all data has been used
			 * actual IO needs to be done
			 */
			retval = Cam_Read_io(dev, count);
			if (retval < 0) { goto exit; }
			else 			{ goto retry; }
		}

		/*
		 * data is available
		 * chunk tells us how much shall be copied
		 */

		if (copy_to_user( buffer,
				dev->bulk_in_buffer + dev->bulk_in_copied, chunk)) {
			retval = -EFAULT;
		} else { retval = chunk; }

		dev->bulk_in_copied += chunk;

		if (available < count) { Cam_Read_io(dev, count - chunk); }
    } else {
		/* no data in the buffer */
		retval = Cam_Read_io(dev, count);
		if (retval < 0) 						{ goto exit; }
		else if (!(file->f_flags & O_NONBLOCK)) { goto retry; }
		retval = -EAGAIN;
    }


    //TODO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	// do a blocking bulk read to get data from the device   
/*	retval = usb_bulk_msg(dev->udev,
			      usb_rcvbulkpipe(dev->udev, dev->bulk_in_endpointAddr),
			      dev->bulk_in_buffer,
			      min(dev->bulk_in_size, count),
			      (int *) &count, 10); //TODO  int timeout was equal to HZ*10

	// if the read was successful, copy the data to userspace   
	if (!retval) {
		if (copy_to_user(buffer, dev->bulk_in_buffer, count))
			retval = -EFAULT;
		else
			retval = count;
	}
*/
exit :
	mutex_unlock(&dev->io_mutex);
	return retval;
}
/*-----------------------------------------------------------------------------
  func descp..

*/
void Cam_Read_Callback(struct urb *urb) {
    struct usb_cam *dev;
    print_debug("%s \n\r",__FUNCTION__);

    dev = urb->context;

    spin_lock(&dev->err_lock);
    /* sync/async unlink faults aren't errors */
    if (urb->status) {
    	if (!(urb->status == -ENOENT     ||
			  urb->status == -ECONNRESET ||
			  urb->status == -ESHUTDOWN)) {
				print_alert("%s - nonzero bulk status received: %d",
					__func__, urb->status);
    	}

		dev->errors = urb->status;
    } else { dev->bulk_in_filled = urb->actual_length; }

    dev->ongoing_read = 0;
    spin_unlock(&dev->err_lock);

    complete(&dev->bulk_in_completion);
}
/*-----------------------------------------------------------------------------
  func descp..

*/
int Cam_Read_io(struct usb_cam *dev, size_t count){
	int retval;
	unsigned long flag;

	/* prepare a read */
	usb_fill_bulk_urb( dev->bulk_in_urb, dev->udev,
			usb_rcvbulkpipe(dev->udev, dev->bulk_in_endpointAddr) ,
			dev->bulk_in_buffer, min(dev->bulk_in_size, count),
			Cam_Read_Callback, dev);

	/* tell everybody to leave the URB alone */
	spin_lock_irqsave(&dev->err_lock, flag);
	dev->ongoing_read = 1;
	spin_unlock_irqrestore(&dev->err_lock, flag);

	/* do it */
	retval = usb_submit_urb(dev->bulk_in_urb, GFP_KERNEL);
	if (retval < 0) {
		print_alert("%s - failed submitting read urb, error %d",
				__FUNCTION__, retval);
		dev->bulk_in_filled = 0;
		retval = (retval == -ENOMEM) ? retval : -EIO;
		spin_lock_irqsave(&dev->err_lock, flag);
		dev->ongoing_read = 0;
		spin_unlock_irqrestore(&dev->err_lock, flag);
	}

	return retval;
}
/*-----------------------------------------------------------------------------
  func descp..

*/
int Cam_Grab (struct usb_interface *interface) {
// utility for IOCTL
// grab 5 urb, isochronous
//	int i, j, retval;
//	int nbUrbs, size, nbPackets, myPacketSize;
//
//	struct usb_interface *interface;
//	struct usb_host_interface *cur_altsetting;
//	struct usb_endpoint_descriptor	endpointDesc;
//	struct urb *myUrb;
//	struct usb_cam *dev;

//	cur_altsetting = interface->cur_altsetting;
//	endpointDesc = cur_altsetting->endpoint[0].desc;
//
//	nbPackets = 40; // The number of isochronous packets this urb should contain
//	myPacketSize = le16_to_cpu(endpointDesc.wMaxPacketSize);
//	size = myPacketSize * nbPackets;
//	nbUrbs = 5;
//	for (i = 0; i < nbUrbs; i++) {
//		usb_free_urb(/** ... */); // Pour Ãªtre certain
//		myUrb[i] = usb_alloc_urb(/** ... */);
//		if (myUrb[i] == NULL) {
//			//printk(KERN_WARNING "");
//			return -ENOMEM;
//		}
//		myUrb[i]->transfer_buffer = usb_buffer_alloc(/** ... */);
//		if (myUrb[i]->transfer_buffer == NULL) {
//			//printk(KERN_WARNING "");
//			usb_free_urb(myUrb[i]);
//			return -ENOMEM;
//		}
//		myUrb[i]->dev = /** ... */;
//		myUrb[i]->context = dev;
//		myUrb[i]->pipe = usb_rcvisocpipe(dev, endpointDesc.bEndpointAddress);
//		myUrb[i]->transfer_flags = URB_ISO_ASAP | URB_NO_TRANSFER_DMA_MAP;
//		myUrb[i]->interval = endpointDesc.bInterval;
//		myUrb[i]->complete = /** ... */;
//		myUrb[i]->number_of_packets = /** ... */;
//		myUrb[i]->transfer_buffer_length = /** ... */;
//		for (j = 0; j < nbPackets; ++j) {
//			myUrb[i]->iso_frame_desc[j].offset = j * myPacketSize;
//			myUrb[i]->iso_frame_desc[j].length = myPacketSize;
//		}
//	}
//	for(i = 0; i < nbUrbs; i++){
//		if ((retval = usb_submit_urb(/** ... */)) < 0) {
//			//printk(KERN_WARNING "");
//			return retval;
//		}
//	}
	return SUCCESS;
}
/*-----------------------------------------------------------------------------
  func descp..

*/
void Print_setting_desc(struct usb_interface *interface) {
	int i, max = interface->num_altsetting;
	struct usb_host_interface *setting;

	setting = interface->cur_altsetting;
	print_warn("//-----------------------------------\n");
	print_warn("Current setting\n");
	print_warn("Descriptor Type     :%u\n",setting->desc.bDescriptorType);
	print_warn("Interface Class     :%u\n",setting->desc.bInterfaceClass);
	print_warn("Interface Number    :%u\n",setting->desc.bInterfaceNumber);
	print_warn("Interface Sub Class :%u\n",setting->desc.bInterfaceSubClass);
	print_warn("Length              :%u\n",setting->desc.bLength);
	print_warn("Num Endpoints       :%u\n",setting->desc.bNumEndpoints);


	for (i = 0; i < max; i++) {
		setting = &interface->altsetting[i];
		print_warn("//-----------------------------------\n");
		print_warn("Alternate setting #%d", i);
		print_warn("Descriptor Type     :%u\n",setting->desc.bDescriptorType);
		print_warn("Interface Class     :%u\n",setting->desc.bInterfaceClass);
		print_warn("Interface Number    :%u\n",setting->desc.bInterfaceNumber);
		print_warn("Interface Sub Class :%u\n",setting->desc.bInterfaceSubClass);
		print_warn("Length              :%u\n",setting->desc.bLength);
		print_warn("Num Endpoints       :%u\n",setting->desc.bNumEndpoints);
	}
}
// EOF ------------------------------------------------------------------------
